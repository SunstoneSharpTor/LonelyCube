/*
  Lonely Cube, a voxel game
  Copyright (C) 2024 Bertie Cartwright

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// This shader performs upsampling on a texture,
// as taken from Call Of Duty method, presented at ACM Siggraph 2014.

// Remember to add bilinear minification filter for this texture!
// Remember to use a floating-point texture format (for HDR)!
// Remember to use edge clamping for this texture!

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (rgba16f, binding = 0) uniform image2D upsampleImage;
uniform sampler2D srcTexture;
uniform float filterRadius;

void main()
{
    ivec2 upsampleTexelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 upsampleTexelSize = 1.0 / vec2(imageSize(upsampleImage));
    vec2 srcTexelCoord = upsampleTexelSize * (vec2(upsampleTexelCoords) + vec2(0.5f, 0.5f));

    // The filter kernel is applied with a radius, specified in texture
    // coordinates, so that the radius will vary across mip resolutions.
    float x = filterRadius;
    float y = filterRadius;

    // Take 9 samples around current texel:
    // a - b - c
    // d - e - f
    // g - h - i
    // === ('e' is the current texel) ===
    vec3 a = texture(srcTexture, vec2(srcTexelCoord.x - x, srcTexelCoord.y + y)).rgb;
    vec3 b = texture(srcTexture, vec2(srcTexelCoord.x,     srcTexelCoord.y + y)).rgb;
    vec3 c = texture(srcTexture, vec2(srcTexelCoord.x + x, srcTexelCoord.y + y)).rgb;

    vec3 d = texture(srcTexture, vec2(srcTexelCoord.x - x, srcTexelCoord.y)).rgb;
    vec3 e = texture(srcTexture, vec2(srcTexelCoord.x,     srcTexelCoord.y)).rgb;
    vec3 f = texture(srcTexture, vec2(srcTexelCoord.x + x, srcTexelCoord.y)).rgb;

    vec3 g = texture(srcTexture, vec2(srcTexelCoord.x - x, srcTexelCoord.y - y)).rgb;
    vec3 h = texture(srcTexture, vec2(srcTexelCoord.x,     srcTexelCoord.y - y)).rgb;
    vec3 i = texture(srcTexture, vec2(srcTexelCoord.x + x, srcTexelCoord.y - y)).rgb;

    // Apply weighted distribution, by using a 3x3 tent filter:
    //  1   | 1 2 1 |
    // -- * | 2 4 2 |
    // 16   | 1 2 1 |
    vec3 upsample = e*4.0;
    upsample += (b+d+f+h)*2.0;
    upsample += (a+c+g+i);
    upsample *= 1.0 / 16.0;

    vec3 colour = imageLoad(upsampleImage, upsampleTexelCoords).rgb + upsample;
    imageStore(upsampleImage, upsampleTexelCoords, vec4(colour, 1.0));
}
